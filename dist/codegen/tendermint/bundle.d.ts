import * as _77 from "./abci/types";
import * as _78 from "./crypto/keys";
import * as _79 from "./crypto/proof";
import * as _80 from "./libs/bits/types";
import * as _81 from "./p2p/types";
import * as _82 from "./types/block";
import * as _83 from "./types/evidence";
import * as _84 from "./types/params";
import * as _85 from "./types/types";
import * as _86 from "./types/validator";
import * as _87 from "./version/types";
export declare namespace tendermint {
    const abci: {
        checkTxTypeFromJSON(object: any): _77.CheckTxType;
        checkTxTypeToJSON(object: _77.CheckTxType): string;
        responseOfferSnapshot_ResultFromJSON(object: any): _77.ResponseOfferSnapshot_Result;
        responseOfferSnapshot_ResultToJSON(object: _77.ResponseOfferSnapshot_Result): string;
        responseApplySnapshotChunk_ResultFromJSON(object: any): _77.ResponseApplySnapshotChunk_Result;
        responseApplySnapshotChunk_ResultToJSON(object: _77.ResponseApplySnapshotChunk_Result): string;
        evidenceTypeFromJSON(object: any): _77.EvidenceType;
        evidenceTypeToJSON(object: _77.EvidenceType): string;
        CheckTxType: typeof _77.CheckTxType;
        CheckTxTypeSDKType: typeof _77.CheckTxType;
        ResponseOfferSnapshot_Result: typeof _77.ResponseOfferSnapshot_Result;
        ResponseOfferSnapshot_ResultSDKType: typeof _77.ResponseOfferSnapshot_Result;
        ResponseApplySnapshotChunk_Result: typeof _77.ResponseApplySnapshotChunk_Result;
        ResponseApplySnapshotChunk_ResultSDKType: typeof _77.ResponseApplySnapshotChunk_Result;
        EvidenceType: typeof _77.EvidenceType;
        EvidenceTypeSDKType: typeof _77.EvidenceType;
        Request: {
            typeUrl: string;
            is(o: any): o is _77.Request;
            isSDK(o: any): o is _77.RequestSDKType;
            encode(message: _77.Request, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
            decode(input: Uint8Array | import("..").BinaryReader, length?: number): _77.Request;
            fromPartial(object: Partial<_77.Request>): _77.Request;
            fromProtoMsg(message: _77.RequestProtoMsg): _77.Request;
            toProto(message: _77.Request): Uint8Array;
            toProtoMsg(message: _77.Request): _77.RequestProtoMsg;
        };
        RequestEcho: {
            typeUrl: string;
            is(o: any): o is _77.RequestEcho;
            isSDK(o: any): o is _77.RequestEchoSDKType;
            encode(message: _77.RequestEcho, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
            decode(input: Uint8Array | import("..").BinaryReader, length?: number): _77.RequestEcho;
            fromPartial(object: Partial<_77.RequestEcho>): _77.RequestEcho;
            fromProtoMsg(message: _77.RequestEchoProtoMsg): _77.RequestEcho;
            toProto(message: _77.RequestEcho): Uint8Array;
            toProtoMsg(message: _77.RequestEcho): _77.RequestEchoProtoMsg;
        };
        RequestFlush: {
            typeUrl: string;
            is(o: any): o is _77.RequestFlush;
            isSDK(o: any): o is _77.RequestFlushSDKType;
            encode(_: _77.RequestFlush, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
            decode(input: Uint8Array | import("..").BinaryReader, length?: number): _77.RequestFlush;
            fromPartial(_: Partial<_77.RequestFlush>): _77.RequestFlush;
            fromProtoMsg(message: _77.RequestFlushProtoMsg): _77.RequestFlush;
            toProto(message: _77.RequestFlush): Uint8Array;
            toProtoMsg(message: _77.RequestFlush): _77.RequestFlushProtoMsg;
        };
        RequestInfo: {
            typeUrl: string;
            is(o: any): o is _77.RequestInfo;
            isSDK(o: any): o is _77.RequestInfoSDKType;
            encode(message: _77.RequestInfo, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
            decode(input: Uint8Array | import("..").BinaryReader, length?: number): _77.RequestInfo;
            fromPartial(object: Partial<_77.RequestInfo>): _77.RequestInfo;
            fromProtoMsg(message: _77.RequestInfoProtoMsg): _77.RequestInfo;
            toProto(message: _77.RequestInfo): Uint8Array;
            toProtoMsg(message: _77.RequestInfo): _77.RequestInfoProtoMsg;
        };
        RequestSetOption: {
            typeUrl: string;
            is(o: any): o is _77.RequestSetOption;
            isSDK(o: any): o is _77.RequestSetOptionSDKType;
            encode(message: _77.RequestSetOption, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
            decode(input: Uint8Array | import("..").BinaryReader, length?: number): _77.RequestSetOption;
            fromPartial(object: Partial<_77.RequestSetOption>): _77.RequestSetOption;
            fromProtoMsg(message: _77.RequestSetOptionProtoMsg): _77.RequestSetOption;
            toProto(message: _77.RequestSetOption): Uint8Array;
            toProtoMsg(message: _77.RequestSetOption): _77.RequestSetOptionProtoMsg;
        };
        RequestInitChain: {
            typeUrl: string;
            is(o: any): o is _77.RequestInitChain;
            isSDK(o: any): o is _77.RequestInitChainSDKType;
            encode(message: _77.RequestInitChain, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
            decode(input: Uint8Array | import("..").BinaryReader, length?: number): _77.RequestInitChain;
            fromPartial(object: Partial<_77.RequestInitChain>): _77.RequestInitChain;
            fromProtoMsg(message: _77.RequestInitChainProtoMsg): _77.RequestInitChain;
            toProto(message: _77.RequestInitChain): Uint8Array;
            toProtoMsg(message: _77.RequestInitChain): _77.RequestInitChainProtoMsg;
        };
        RequestQuery: {
            typeUrl: string;
            is(o: any): o is _77.RequestQuery;
            isSDK(o: any): o is _77.RequestQuerySDKType;
            encode(message: _77.RequestQuery, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
            decode(input: Uint8Array | import("..").BinaryReader, length?: number): _77.RequestQuery;
            fromPartial(object: Partial<_77.RequestQuery>): _77.RequestQuery;
            fromProtoMsg(message: _77.RequestQueryProtoMsg): _77.RequestQuery;
            toProto(message: _77.RequestQuery): Uint8Array;
            toProtoMsg(message: _77.RequestQuery): _77.RequestQueryProtoMsg;
        };
        RequestBeginBlock: {
            typeUrl: string;
            is(o: any): o is _77.RequestBeginBlock;
            isSDK(o: any): o is _77.RequestBeginBlockSDKType;
            encode(message: _77.RequestBeginBlock, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
            decode(input: Uint8Array | import("..").BinaryReader, length?: number): _77.RequestBeginBlock;
            fromPartial(object: Partial<_77.RequestBeginBlock>): _77.RequestBeginBlock;
            fromProtoMsg(message: _77.RequestBeginBlockProtoMsg): _77.RequestBeginBlock;
            toProto(message: _77.RequestBeginBlock): Uint8Array;
            toProtoMsg(message: _77.RequestBeginBlock): _77.RequestBeginBlockProtoMsg;
        };
        RequestCheckTx: {
            typeUrl: string;
            is(o: any): o is _77.RequestCheckTx;
            isSDK(o: any): o is _77.RequestCheckTxSDKType;
            encode(message: _77.RequestCheckTx, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
            decode(input: Uint8Array | import("..").BinaryReader, length?: number): _77.RequestCheckTx;
            fromPartial(object: Partial<_77.RequestCheckTx>): _77.RequestCheckTx;
            fromProtoMsg(message: _77.RequestCheckTxProtoMsg): _77.RequestCheckTx;
            toProto(message: _77.RequestCheckTx): Uint8Array;
            toProtoMsg(message: _77.RequestCheckTx): _77.RequestCheckTxProtoMsg;
        };
        RequestDeliverTx: {
            typeUrl: string;
            is(o: any): o is _77.RequestDeliverTx;
            isSDK(o: any): o is _77.RequestDeliverTxSDKType;
            encode(message: _77.RequestDeliverTx, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
            decode(input: Uint8Array | import("..").BinaryReader, length?: number): _77.RequestDeliverTx;
            fromPartial(object: Partial<_77.RequestDeliverTx>): _77.RequestDeliverTx;
            fromProtoMsg(message: _77.RequestDeliverTxProtoMsg): _77.RequestDeliverTx;
            toProto(message: _77.RequestDeliverTx): Uint8Array;
            toProtoMsg(message: _77.RequestDeliverTx): _77.RequestDeliverTxProtoMsg;
        };
        RequestEndBlock: {
            typeUrl: string;
            is(o: any): o is _77.RequestEndBlock;
            isSDK(o: any): o is _77.RequestEndBlockSDKType;
            encode(message: _77.RequestEndBlock, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
            decode(input: Uint8Array | import("..").BinaryReader, length?: number): _77.RequestEndBlock;
            fromPartial(object: Partial<_77.RequestEndBlock>): _77.RequestEndBlock;
            fromProtoMsg(message: _77.RequestEndBlockProtoMsg): _77.RequestEndBlock;
            toProto(message: _77.RequestEndBlock): Uint8Array;
            toProtoMsg(message: _77.RequestEndBlock): _77.RequestEndBlockProtoMsg;
        };
        RequestCommit: {
            typeUrl: string;
            is(o: any): o is _77.RequestCommit;
            isSDK(o: any): o is _77.RequestCommitSDKType;
            encode(_: _77.RequestCommit, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
            decode(input: Uint8Array | import("..").BinaryReader, length?: number): _77.RequestCommit;
            fromPartial(_: Partial<_77.RequestCommit>): _77.RequestCommit;
            fromProtoMsg(message: _77.RequestCommitProtoMsg): _77.RequestCommit;
            toProto(message: _77.RequestCommit): Uint8Array;
            toProtoMsg(message: _77.RequestCommit): _77.RequestCommitProtoMsg;
        };
        RequestListSnapshots: {
            typeUrl: string;
            is(o: any): o is _77.RequestListSnapshots;
            isSDK(o: any): o is _77.RequestListSnapshotsSDKType;
            encode(_: _77.RequestListSnapshots, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
            decode(input: Uint8Array | import("..").BinaryReader, length?: number): _77.RequestListSnapshots;
            fromPartial(_: Partial<_77.RequestListSnapshots>): _77.RequestListSnapshots;
            fromProtoMsg(message: _77.RequestListSnapshotsProtoMsg): _77.RequestListSnapshots;
            toProto(message: _77.RequestListSnapshots): Uint8Array;
            toProtoMsg(message: _77.RequestListSnapshots): _77.RequestListSnapshotsProtoMsg;
        };
        RequestOfferSnapshot: {
            typeUrl: string;
            is(o: any): o is _77.RequestOfferSnapshot;
            isSDK(o: any): o is _77.RequestOfferSnapshotSDKType;
            encode(message: _77.RequestOfferSnapshot, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
            decode(input: Uint8Array | import("..").BinaryReader, length?: number): _77.RequestOfferSnapshot;
            fromPartial(object: Partial<_77.RequestOfferSnapshot>): _77.RequestOfferSnapshot;
            fromProtoMsg(message: _77.RequestOfferSnapshotProtoMsg): _77.RequestOfferSnapshot;
            toProto(message: _77.RequestOfferSnapshot): Uint8Array;
            toProtoMsg(message: _77.RequestOfferSnapshot): _77.RequestOfferSnapshotProtoMsg;
        };
        RequestLoadSnapshotChunk: {
            typeUrl: string;
            is(o: any): o is _77.RequestLoadSnapshotChunk;
            isSDK(o: any): o is _77.RequestLoadSnapshotChunkSDKType;
            encode(message: _77.RequestLoadSnapshotChunk, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
            decode(input: Uint8Array | import("..").BinaryReader, length?: number): _77.RequestLoadSnapshotChunk;
            fromPartial(object: Partial<_77.RequestLoadSnapshotChunk>): _77.RequestLoadSnapshotChunk;
            fromProtoMsg(message: _77.RequestLoadSnapshotChunkProtoMsg): _77.RequestLoadSnapshotChunk;
            toProto(message: _77.RequestLoadSnapshotChunk): Uint8Array;
            toProtoMsg(message: _77.RequestLoadSnapshotChunk): _77.RequestLoadSnapshotChunkProtoMsg;
        };
        RequestApplySnapshotChunk: {
            typeUrl: string;
            is(o: any): o is _77.RequestApplySnapshotChunk;
            isSDK(o: any): o is _77.RequestApplySnapshotChunkSDKType;
            encode(message: _77.RequestApplySnapshotChunk, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
            decode(input: Uint8Array | import("..").BinaryReader, length?: number): _77.RequestApplySnapshotChunk;
            fromPartial(object: Partial<_77.RequestApplySnapshotChunk>): _77.RequestApplySnapshotChunk;
            fromProtoMsg(message: _77.RequestApplySnapshotChunkProtoMsg): _77.RequestApplySnapshotChunk;
            toProto(message: _77.RequestApplySnapshotChunk): Uint8Array;
            toProtoMsg(message: _77.RequestApplySnapshotChunk): _77.RequestApplySnapshotChunkProtoMsg;
        };
        Response: {
            typeUrl: string;
            is(o: any): o is _77.Response;
            isSDK(o: any): o is _77.ResponseSDKType;
            encode(message: _77.Response, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
            decode(input: Uint8Array | import("..").BinaryReader, length?: number): _77.Response;
            fromPartial(object: Partial<_77.Response>): _77.Response;
            fromProtoMsg(message: _77.ResponseProtoMsg): _77.Response;
            toProto(message: _77.Response): Uint8Array;
            toProtoMsg(message: _77.Response): _77.ResponseProtoMsg;
        };
        ResponseException: {
            typeUrl: string;
            is(o: any): o is _77.ResponseException;
            isSDK(o: any): o is _77.ResponseExceptionSDKType;
            encode(message: _77.ResponseException, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
            decode(input: Uint8Array | import("..").BinaryReader, length?: number): _77.ResponseException;
            fromPartial(object: Partial<_77.ResponseException>): _77.ResponseException;
            fromProtoMsg(message: _77.ResponseExceptionProtoMsg): _77.ResponseException;
            toProto(message: _77.ResponseException): Uint8Array;
            toProtoMsg(message: _77.ResponseException): _77.ResponseExceptionProtoMsg;
        };
        ResponseEcho: {
            typeUrl: string;
            is(o: any): o is _77.ResponseEcho;
            isSDK(o: any): o is _77.ResponseEchoSDKType;
            encode(message: _77.ResponseEcho, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
            decode(input: Uint8Array | import("..").BinaryReader, length?: number): _77.ResponseEcho;
            fromPartial(object: Partial<_77.ResponseEcho>): _77.ResponseEcho;
            fromProtoMsg(message: _77.ResponseEchoProtoMsg): _77.ResponseEcho;
            toProto(message: _77.ResponseEcho): Uint8Array;
            toProtoMsg(message: _77.ResponseEcho): _77.ResponseEchoProtoMsg;
        };
        ResponseFlush: {
            typeUrl: string;
            is(o: any): o is _77.ResponseFlush;
            isSDK(o: any): o is _77.ResponseFlushSDKType;
            encode(_: _77.ResponseFlush, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
            decode(input: Uint8Array | import("..").BinaryReader, length?: number): _77.ResponseFlush;
            fromPartial(_: Partial<_77.ResponseFlush>): _77.ResponseFlush;
            fromProtoMsg(message: _77.ResponseFlushProtoMsg): _77.ResponseFlush;
            toProto(message: _77.ResponseFlush): Uint8Array;
            toProtoMsg(message: _77.ResponseFlush): _77.ResponseFlushProtoMsg;
        };
        ResponseInfo: {
            typeUrl: string;
            is(o: any): o is _77.ResponseInfo;
            isSDK(o: any): o is _77.ResponseInfoSDKType;
            encode(message: _77.ResponseInfo, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
            decode(input: Uint8Array | import("..").BinaryReader, length?: number): _77.ResponseInfo;
            fromPartial(object: Partial<_77.ResponseInfo>): _77.ResponseInfo;
            fromProtoMsg(message: _77.ResponseInfoProtoMsg): _77.ResponseInfo;
            toProto(message: _77.ResponseInfo): Uint8Array;
            toProtoMsg(message: _77.ResponseInfo): _77.ResponseInfoProtoMsg;
        };
        ResponseSetOption: {
            typeUrl: string;
            is(o: any): o is _77.ResponseSetOption;
            isSDK(o: any): o is _77.ResponseSetOptionSDKType;
            encode(message: _77.ResponseSetOption, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
            decode(input: Uint8Array | import("..").BinaryReader, length?: number): _77.ResponseSetOption;
            fromPartial(object: Partial<_77.ResponseSetOption>): _77.ResponseSetOption;
            fromProtoMsg(message: _77.ResponseSetOptionProtoMsg): _77.ResponseSetOption;
            toProto(message: _77.ResponseSetOption): Uint8Array;
            toProtoMsg(message: _77.ResponseSetOption): _77.ResponseSetOptionProtoMsg;
        };
        ResponseInitChain: {
            typeUrl: string;
            is(o: any): o is _77.ResponseInitChain;
            isSDK(o: any): o is _77.ResponseInitChainSDKType;
            encode(message: _77.ResponseInitChain, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
            decode(input: Uint8Array | import("..").BinaryReader, length?: number): _77.ResponseInitChain;
            fromPartial(object: Partial<_77.ResponseInitChain>): _77.ResponseInitChain;
            fromProtoMsg(message: _77.ResponseInitChainProtoMsg): _77.ResponseInitChain;
            toProto(message: _77.ResponseInitChain): Uint8Array;
            toProtoMsg(message: _77.ResponseInitChain): _77.ResponseInitChainProtoMsg;
        };
        ResponseQuery: {
            typeUrl: string;
            is(o: any): o is _77.ResponseQuery;
            isSDK(o: any): o is _77.ResponseQuerySDKType;
            encode(message: _77.ResponseQuery, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
            decode(input: Uint8Array | import("..").BinaryReader, length?: number): _77.ResponseQuery;
            fromPartial(object: Partial<_77.ResponseQuery>): _77.ResponseQuery;
            fromProtoMsg(message: _77.ResponseQueryProtoMsg): _77.ResponseQuery;
            toProto(message: _77.ResponseQuery): Uint8Array;
            toProtoMsg(message: _77.ResponseQuery): _77.ResponseQueryProtoMsg;
        };
        ResponseBeginBlock: {
            typeUrl: string;
            is(o: any): o is _77.ResponseBeginBlock;
            isSDK(o: any): o is _77.ResponseBeginBlockSDKType;
            encode(message: _77.ResponseBeginBlock, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
            decode(input: Uint8Array | import("..").BinaryReader, length?: number): _77.ResponseBeginBlock;
            fromPartial(object: Partial<_77.ResponseBeginBlock>): _77.ResponseBeginBlock;
            fromProtoMsg(message: _77.ResponseBeginBlockProtoMsg): _77.ResponseBeginBlock;
            toProto(message: _77.ResponseBeginBlock): Uint8Array;
            toProtoMsg(message: _77.ResponseBeginBlock): _77.ResponseBeginBlockProtoMsg;
        };
        ResponseCheckTx: {
            typeUrl: string;
            is(o: any): o is _77.ResponseCheckTx;
            isSDK(o: any): o is _77.ResponseCheckTxSDKType;
            encode(message: _77.ResponseCheckTx, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
            decode(input: Uint8Array | import("..").BinaryReader, length?: number): _77.ResponseCheckTx;
            fromPartial(object: Partial<_77.ResponseCheckTx>): _77.ResponseCheckTx;
            fromProtoMsg(message: _77.ResponseCheckTxProtoMsg): _77.ResponseCheckTx;
            toProto(message: _77.ResponseCheckTx): Uint8Array;
            toProtoMsg(message: _77.ResponseCheckTx): _77.ResponseCheckTxProtoMsg;
        };
        ResponseDeliverTx: {
            typeUrl: string;
            is(o: any): o is _77.ResponseDeliverTx;
            isSDK(o: any): o is _77.ResponseDeliverTxSDKType;
            encode(message: _77.ResponseDeliverTx, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
            decode(input: Uint8Array | import("..").BinaryReader, length?: number): _77.ResponseDeliverTx;
            fromPartial(object: Partial<_77.ResponseDeliverTx>): _77.ResponseDeliverTx;
            fromProtoMsg(message: _77.ResponseDeliverTxProtoMsg): _77.ResponseDeliverTx;
            toProto(message: _77.ResponseDeliverTx): Uint8Array;
            toProtoMsg(message: _77.ResponseDeliverTx): _77.ResponseDeliverTxProtoMsg;
        };
        ResponseEndBlock: {
            typeUrl: string;
            is(o: any): o is _77.ResponseEndBlock;
            isSDK(o: any): o is _77.ResponseEndBlockSDKType;
            encode(message: _77.ResponseEndBlock, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
            decode(input: Uint8Array | import("..").BinaryReader, length?: number): _77.ResponseEndBlock;
            fromPartial(object: Partial<_77.ResponseEndBlock>): _77.ResponseEndBlock;
            fromProtoMsg(message: _77.ResponseEndBlockProtoMsg): _77.ResponseEndBlock;
            toProto(message: _77.ResponseEndBlock): Uint8Array;
            toProtoMsg(message: _77.ResponseEndBlock): _77.ResponseEndBlockProtoMsg;
        };
        ResponseCommit: {
            typeUrl: string;
            is(o: any): o is _77.ResponseCommit;
            isSDK(o: any): o is _77.ResponseCommitSDKType;
            encode(message: _77.ResponseCommit, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
            decode(input: Uint8Array | import("..").BinaryReader, length?: number): _77.ResponseCommit;
            fromPartial(object: Partial<_77.ResponseCommit>): _77.ResponseCommit;
            fromProtoMsg(message: _77.ResponseCommitProtoMsg): _77.ResponseCommit;
            toProto(message: _77.ResponseCommit): Uint8Array;
            toProtoMsg(message: _77.ResponseCommit): _77.ResponseCommitProtoMsg;
        };
        ResponseListSnapshots: {
            typeUrl: string;
            is(o: any): o is _77.ResponseListSnapshots;
            isSDK(o: any): o is _77.ResponseListSnapshotsSDKType;
            encode(message: _77.ResponseListSnapshots, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
            decode(input: Uint8Array | import("..").BinaryReader, length?: number): _77.ResponseListSnapshots;
            fromPartial(object: Partial<_77.ResponseListSnapshots>): _77.ResponseListSnapshots;
            fromProtoMsg(message: _77.ResponseListSnapshotsProtoMsg): _77.ResponseListSnapshots;
            toProto(message: _77.ResponseListSnapshots): Uint8Array;
            toProtoMsg(message: _77.ResponseListSnapshots): _77.ResponseListSnapshotsProtoMsg;
        };
        ResponseOfferSnapshot: {
            typeUrl: string;
            is(o: any): o is _77.ResponseOfferSnapshot;
            isSDK(o: any): o is _77.ResponseOfferSnapshotSDKType;
            encode(message: _77.ResponseOfferSnapshot, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
            decode(input: Uint8Array | import("..").BinaryReader, length?: number): _77.ResponseOfferSnapshot;
            fromPartial(object: Partial<_77.ResponseOfferSnapshot>): _77.ResponseOfferSnapshot;
            fromProtoMsg(message: _77.ResponseOfferSnapshotProtoMsg): _77.ResponseOfferSnapshot;
            toProto(message: _77.ResponseOfferSnapshot): Uint8Array;
            toProtoMsg(message: _77.ResponseOfferSnapshot): _77.ResponseOfferSnapshotProtoMsg;
        };
        ResponseLoadSnapshotChunk: {
            typeUrl: string;
            is(o: any): o is _77.ResponseLoadSnapshotChunk;
            isSDK(o: any): o is _77.ResponseLoadSnapshotChunkSDKType;
            encode(message: _77.ResponseLoadSnapshotChunk, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
            decode(input: Uint8Array | import("..").BinaryReader, length?: number): _77.ResponseLoadSnapshotChunk;
            fromPartial(object: Partial<_77.ResponseLoadSnapshotChunk>): _77.ResponseLoadSnapshotChunk;
            fromProtoMsg(message: _77.ResponseLoadSnapshotChunkProtoMsg): _77.ResponseLoadSnapshotChunk;
            toProto(message: _77.ResponseLoadSnapshotChunk): Uint8Array;
            toProtoMsg(message: _77.ResponseLoadSnapshotChunk): _77.ResponseLoadSnapshotChunkProtoMsg;
        };
        ResponseApplySnapshotChunk: {
            typeUrl: string;
            is(o: any): o is _77.ResponseApplySnapshotChunk;
            isSDK(o: any): o is _77.ResponseApplySnapshotChunkSDKType;
            encode(message: _77.ResponseApplySnapshotChunk, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
            decode(input: Uint8Array | import("..").BinaryReader, length?: number): _77.ResponseApplySnapshotChunk;
            fromPartial(object: Partial<_77.ResponseApplySnapshotChunk>): _77.ResponseApplySnapshotChunk;
            fromProtoMsg(message: _77.ResponseApplySnapshotChunkProtoMsg): _77.ResponseApplySnapshotChunk;
            toProto(message: _77.ResponseApplySnapshotChunk): Uint8Array;
            toProtoMsg(message: _77.ResponseApplySnapshotChunk): _77.ResponseApplySnapshotChunkProtoMsg;
        };
        ConsensusParams: {
            typeUrl: string;
            is(o: any): o is _77.ConsensusParams;
            isSDK(o: any): o is _77.ConsensusParamsSDKType;
            encode(message: _77.ConsensusParams, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
            decode(input: Uint8Array | import("..").BinaryReader, length?: number): _77.ConsensusParams;
            fromPartial(object: Partial<_77.ConsensusParams>): _77.ConsensusParams;
            fromProtoMsg(message: _77.ConsensusParamsProtoMsg): _77.ConsensusParams;
            toProto(message: _77.ConsensusParams): Uint8Array;
            toProtoMsg(message: _77.ConsensusParams): _77.ConsensusParamsProtoMsg;
        };
        BlockParams: {
            typeUrl: string;
            is(o: any): o is _77.BlockParams;
            isSDK(o: any): o is _77.BlockParamsSDKType;
            encode(message: _77.BlockParams, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
            decode(input: Uint8Array | import("..").BinaryReader, length?: number): _77.BlockParams;
            fromPartial(object: Partial<_77.BlockParams>): _77.BlockParams;
            fromProtoMsg(message: _77.BlockParamsProtoMsg): _77.BlockParams;
            toProto(message: _77.BlockParams): Uint8Array;
            toProtoMsg(message: _77.BlockParams): _77.BlockParamsProtoMsg;
        };
        LastCommitInfo: {
            typeUrl: string;
            is(o: any): o is _77.LastCommitInfo;
            isSDK(o: any): o is _77.LastCommitInfoSDKType;
            encode(message: _77.LastCommitInfo, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
            decode(input: Uint8Array | import("..").BinaryReader, length?: number): _77.LastCommitInfo;
            fromPartial(object: Partial<_77.LastCommitInfo>): _77.LastCommitInfo;
            fromProtoMsg(message: _77.LastCommitInfoProtoMsg): _77.LastCommitInfo;
            toProto(message: _77.LastCommitInfo): Uint8Array;
            toProtoMsg(message: _77.LastCommitInfo): _77.LastCommitInfoProtoMsg;
        };
        Event: {
            typeUrl: string;
            is(o: any): o is _77.Event;
            isSDK(o: any): o is _77.EventSDKType;
            encode(message: _77.Event, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
            decode(input: Uint8Array | import("..").BinaryReader, length?: number): _77.Event;
            fromPartial(object: Partial<_77.Event>): _77.Event;
            fromProtoMsg(message: _77.EventProtoMsg): _77.Event;
            toProto(message: _77.Event): Uint8Array;
            toProtoMsg(message: _77.Event): _77.EventProtoMsg;
        };
        EventAttribute: {
            typeUrl: string;
            is(o: any): o is _77.EventAttribute;
            isSDK(o: any): o is _77.EventAttributeSDKType;
            encode(message: _77.EventAttribute, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
            decode(input: Uint8Array | import("..").BinaryReader, length?: number): _77.EventAttribute;
            fromPartial(object: Partial<_77.EventAttribute>): _77.EventAttribute;
            fromProtoMsg(message: _77.EventAttributeProtoMsg): _77.EventAttribute;
            toProto(message: _77.EventAttribute): Uint8Array;
            toProtoMsg(message: _77.EventAttribute): _77.EventAttributeProtoMsg;
        };
        TxResult: {
            typeUrl: string;
            is(o: any): o is _77.TxResult;
            isSDK(o: any): o is _77.TxResultSDKType;
            encode(message: _77.TxResult, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
            decode(input: Uint8Array | import("..").BinaryReader, length?: number): _77.TxResult;
            fromPartial(object: Partial<_77.TxResult>): _77.TxResult;
            fromProtoMsg(message: _77.TxResultProtoMsg): _77.TxResult;
            toProto(message: _77.TxResult): Uint8Array;
            toProtoMsg(message: _77.TxResult): _77.TxResultProtoMsg;
        };
        Validator: {
            typeUrl: string;
            is(o: any): o is _77.Validator;
            isSDK(o: any): o is _77.ValidatorSDKType;
            encode(message: _77.Validator, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
            decode(input: Uint8Array | import("..").BinaryReader, length?: number): _77.Validator;
            fromPartial(object: Partial<_77.Validator>): _77.Validator;
            fromProtoMsg(message: _77.ValidatorProtoMsg): _77.Validator;
            toProto(message: _77.Validator): Uint8Array;
            toProtoMsg(message: _77.Validator): _77.ValidatorProtoMsg;
        };
        ValidatorUpdate: {
            typeUrl: string;
            is(o: any): o is _77.ValidatorUpdate;
            isSDK(o: any): o is _77.ValidatorUpdateSDKType;
            encode(message: _77.ValidatorUpdate, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
            decode(input: Uint8Array | import("..").BinaryReader, length?: number): _77.ValidatorUpdate;
            fromPartial(object: Partial<_77.ValidatorUpdate>): _77.ValidatorUpdate;
            fromProtoMsg(message: _77.ValidatorUpdateProtoMsg): _77.ValidatorUpdate;
            toProto(message: _77.ValidatorUpdate): Uint8Array;
            toProtoMsg(message: _77.ValidatorUpdate): _77.ValidatorUpdateProtoMsg;
        };
        VoteInfo: {
            typeUrl: string;
            is(o: any): o is _77.VoteInfo;
            isSDK(o: any): o is _77.VoteInfoSDKType;
            encode(message: _77.VoteInfo, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
            decode(input: Uint8Array | import("..").BinaryReader, length?: number): _77.VoteInfo;
            fromPartial(object: Partial<_77.VoteInfo>): _77.VoteInfo;
            fromProtoMsg(message: _77.VoteInfoProtoMsg): _77.VoteInfo;
            toProto(message: _77.VoteInfo): Uint8Array;
            toProtoMsg(message: _77.VoteInfo): _77.VoteInfoProtoMsg;
        };
        Evidence: {
            typeUrl: string;
            is(o: any): o is _77.Evidence;
            isSDK(o: any): o is _77.EvidenceSDKType;
            encode(message: _77.Evidence, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
            decode(input: Uint8Array | import("..").BinaryReader, length?: number): _77.Evidence;
            fromPartial(object: Partial<_77.Evidence>): _77.Evidence;
            fromProtoMsg(message: _77.EvidenceProtoMsg): _77.Evidence;
            toProto(message: _77.Evidence): Uint8Array;
            toProtoMsg(message: _77.Evidence): _77.EvidenceProtoMsg;
        };
        Snapshot: {
            typeUrl: string;
            is(o: any): o is _77.Snapshot;
            isSDK(o: any): o is _77.SnapshotSDKType;
            encode(message: _77.Snapshot, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
            decode(input: Uint8Array | import("..").BinaryReader, length?: number): _77.Snapshot;
            fromPartial(object: Partial<_77.Snapshot>): _77.Snapshot;
            fromProtoMsg(message: _77.SnapshotProtoMsg): _77.Snapshot;
            toProto(message: _77.Snapshot): Uint8Array;
            toProtoMsg(message: _77.Snapshot): _77.SnapshotProtoMsg;
        };
    };
    const crypto: {
        Proof: {
            typeUrl: string;
            is(o: any): o is _79.Proof;
            isSDK(o: any): o is _79.ProofSDKType;
            encode(message: _79.Proof, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
            decode(input: Uint8Array | import("..").BinaryReader, length?: number): _79.Proof;
            fromPartial(object: Partial<_79.Proof>): _79.Proof;
            fromProtoMsg(message: _79.ProofProtoMsg): _79.Proof;
            toProto(message: _79.Proof): Uint8Array;
            toProtoMsg(message: _79.Proof): _79.ProofProtoMsg;
        };
        ValueOp: {
            typeUrl: string;
            is(o: any): o is _79.ValueOp;
            isSDK(o: any): o is _79.ValueOpSDKType;
            encode(message: _79.ValueOp, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
            decode(input: Uint8Array | import("..").BinaryReader, length?: number): _79.ValueOp;
            fromPartial(object: Partial<_79.ValueOp>): _79.ValueOp;
            fromProtoMsg(message: _79.ValueOpProtoMsg): _79.ValueOp;
            toProto(message: _79.ValueOp): Uint8Array;
            toProtoMsg(message: _79.ValueOp): _79.ValueOpProtoMsg;
        };
        DominoOp: {
            typeUrl: string;
            is(o: any): o is _79.DominoOp;
            isSDK(o: any): o is _79.DominoOpSDKType;
            encode(message: _79.DominoOp, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
            decode(input: Uint8Array | import("..").BinaryReader, length?: number): _79.DominoOp;
            fromPartial(object: Partial<_79.DominoOp>): _79.DominoOp;
            fromProtoMsg(message: _79.DominoOpProtoMsg): _79.DominoOp;
            toProto(message: _79.DominoOp): Uint8Array;
            toProtoMsg(message: _79.DominoOp): _79.DominoOpProtoMsg;
        };
        ProofOp: {
            typeUrl: string;
            is(o: any): o is _79.ProofOp;
            isSDK(o: any): o is _79.ProofOpSDKType;
            encode(message: _79.ProofOp, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
            decode(input: Uint8Array | import("..").BinaryReader, length?: number): _79.ProofOp;
            fromPartial(object: Partial<_79.ProofOp>): _79.ProofOp;
            fromProtoMsg(message: _79.ProofOpProtoMsg): _79.ProofOp;
            toProto(message: _79.ProofOp): Uint8Array;
            toProtoMsg(message: _79.ProofOp): _79.ProofOpProtoMsg;
        };
        ProofOps: {
            typeUrl: string;
            is(o: any): o is _79.ProofOps;
            isSDK(o: any): o is _79.ProofOpsSDKType;
            encode(message: _79.ProofOps, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
            decode(input: Uint8Array | import("..").BinaryReader, length?: number): _79.ProofOps;
            fromPartial(object: Partial<_79.ProofOps>): _79.ProofOps;
            fromProtoMsg(message: _79.ProofOpsProtoMsg): _79.ProofOps;
            toProto(message: _79.ProofOps): Uint8Array;
            toProtoMsg(message: _79.ProofOps): _79.ProofOpsProtoMsg;
        };
        PublicKey: {
            typeUrl: string;
            is(o: any): o is _78.PublicKey;
            isSDK(o: any): o is _78.PublicKeySDKType;
            encode(message: _78.PublicKey, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
            decode(input: Uint8Array | import("..").BinaryReader, length?: number): _78.PublicKey;
            fromPartial(object: Partial<_78.PublicKey>): _78.PublicKey;
            fromProtoMsg(message: _78.PublicKeyProtoMsg): _78.PublicKey;
            toProto(message: _78.PublicKey): Uint8Array;
            toProtoMsg(message: _78.PublicKey): _78.PublicKeyProtoMsg;
        };
    };
    namespace libs {
        const bits: {
            BitArray: {
                typeUrl: string;
                is(o: any): o is _80.BitArray;
                isSDK(o: any): o is _80.BitArraySDKType;
                encode(message: _80.BitArray, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
                decode(input: Uint8Array | import("..").BinaryReader, length?: number): _80.BitArray;
                fromPartial(object: Partial<_80.BitArray>): _80.BitArray;
                fromProtoMsg(message: _80.BitArrayProtoMsg): _80.BitArray;
                toProto(message: _80.BitArray): Uint8Array;
                toProtoMsg(message: _80.BitArray): _80.BitArrayProtoMsg;
            };
        };
    }
    const p2p: {
        ProtocolVersion: {
            typeUrl: string;
            is(o: any): o is _81.ProtocolVersion;
            isSDK(o: any): o is _81.ProtocolVersionSDKType;
            encode(message: _81.ProtocolVersion, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
            decode(input: Uint8Array | import("..").BinaryReader, length?: number): _81.ProtocolVersion;
            fromPartial(object: Partial<_81.ProtocolVersion>): _81.ProtocolVersion;
            fromProtoMsg(message: _81.ProtocolVersionProtoMsg): _81.ProtocolVersion;
            toProto(message: _81.ProtocolVersion): Uint8Array;
            toProtoMsg(message: _81.ProtocolVersion): _81.ProtocolVersionProtoMsg;
        };
        NodeInfo: {
            typeUrl: string;
            is(o: any): o is _81.NodeInfo;
            isSDK(o: any): o is _81.NodeInfoSDKType;
            encode(message: _81.NodeInfo, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
            decode(input: Uint8Array | import("..").BinaryReader, length?: number): _81.NodeInfo;
            fromPartial(object: Partial<_81.NodeInfo>): _81.NodeInfo;
            fromProtoMsg(message: _81.NodeInfoProtoMsg): _81.NodeInfo;
            toProto(message: _81.NodeInfo): Uint8Array;
            toProtoMsg(message: _81.NodeInfo): _81.NodeInfoProtoMsg;
        };
        NodeInfoOther: {
            typeUrl: string;
            is(o: any): o is _81.NodeInfoOther;
            isSDK(o: any): o is _81.NodeInfoOtherSDKType;
            encode(message: _81.NodeInfoOther, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
            decode(input: Uint8Array | import("..").BinaryReader, length?: number): _81.NodeInfoOther;
            fromPartial(object: Partial<_81.NodeInfoOther>): _81.NodeInfoOther;
            fromProtoMsg(message: _81.NodeInfoOtherProtoMsg): _81.NodeInfoOther;
            toProto(message: _81.NodeInfoOther): Uint8Array;
            toProtoMsg(message: _81.NodeInfoOther): _81.NodeInfoOtherProtoMsg;
        };
        PeerInfo: {
            typeUrl: string;
            is(o: any): o is _81.PeerInfo;
            isSDK(o: any): o is _81.PeerInfoSDKType;
            encode(message: _81.PeerInfo, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
            decode(input: Uint8Array | import("..").BinaryReader, length?: number): _81.PeerInfo;
            fromPartial(object: Partial<_81.PeerInfo>): _81.PeerInfo;
            fromProtoMsg(message: _81.PeerInfoProtoMsg): _81.PeerInfo;
            toProto(message: _81.PeerInfo): Uint8Array;
            toProtoMsg(message: _81.PeerInfo): _81.PeerInfoProtoMsg;
        };
        PeerAddressInfo: {
            typeUrl: string;
            is(o: any): o is _81.PeerAddressInfo;
            isSDK(o: any): o is _81.PeerAddressInfoSDKType;
            encode(message: _81.PeerAddressInfo, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
            decode(input: Uint8Array | import("..").BinaryReader, length?: number): _81.PeerAddressInfo;
            fromPartial(object: Partial<_81.PeerAddressInfo>): _81.PeerAddressInfo;
            fromProtoMsg(message: _81.PeerAddressInfoProtoMsg): _81.PeerAddressInfo;
            toProto(message: _81.PeerAddressInfo): Uint8Array;
            toProtoMsg(message: _81.PeerAddressInfo): _81.PeerAddressInfoProtoMsg;
        };
    };
    const types: {
        ValidatorSet: {
            typeUrl: string;
            is(o: any): o is _86.ValidatorSet;
            isSDK(o: any): o is _86.ValidatorSetSDKType;
            encode(message: _86.ValidatorSet, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
            decode(input: Uint8Array | import("..").BinaryReader, length?: number): _86.ValidatorSet;
            fromPartial(object: Partial<_86.ValidatorSet>): _86.ValidatorSet;
            fromProtoMsg(message: _86.ValidatorSetProtoMsg): _86.ValidatorSet;
            toProto(message: _86.ValidatorSet): Uint8Array;
            toProtoMsg(message: _86.ValidatorSet): _86.ValidatorSetProtoMsg;
        };
        Validator: {
            typeUrl: string;
            is(o: any): o is _86.Validator;
            isSDK(o: any): o is _86.ValidatorSDKType;
            encode(message: _86.Validator, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
            decode(input: Uint8Array | import("..").BinaryReader, length?: number): _86.Validator;
            fromPartial(object: Partial<_86.Validator>): _86.Validator;
            fromProtoMsg(message: _86.ValidatorProtoMsg): _86.Validator;
            toProto(message: _86.Validator): Uint8Array;
            toProtoMsg(message: _86.Validator): _86.ValidatorProtoMsg;
        };
        SimpleValidator: {
            typeUrl: string;
            is(o: any): o is _86.SimpleValidator;
            isSDK(o: any): o is _86.SimpleValidatorSDKType;
            encode(message: _86.SimpleValidator, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
            decode(input: Uint8Array | import("..").BinaryReader, length?: number): _86.SimpleValidator;
            fromPartial(object: Partial<_86.SimpleValidator>): _86.SimpleValidator;
            fromProtoMsg(message: _86.SimpleValidatorProtoMsg): _86.SimpleValidator;
            toProto(message: _86.SimpleValidator): Uint8Array;
            toProtoMsg(message: _86.SimpleValidator): _86.SimpleValidatorProtoMsg;
        };
        blockIDFlagFromJSON(object: any): _85.BlockIDFlag;
        blockIDFlagToJSON(object: _85.BlockIDFlag): string;
        signedMsgTypeFromJSON(object: any): _85.SignedMsgType;
        signedMsgTypeToJSON(object: _85.SignedMsgType): string;
        BlockIDFlag: typeof _85.BlockIDFlag;
        BlockIDFlagSDKType: typeof _85.BlockIDFlag;
        SignedMsgType: typeof _85.SignedMsgType;
        SignedMsgTypeSDKType: typeof _85.SignedMsgType;
        PartSetHeader: {
            typeUrl: string;
            is(o: any): o is _85.PartSetHeader;
            isSDK(o: any): o is _85.PartSetHeaderSDKType;
            encode(message: _85.PartSetHeader, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
            decode(input: Uint8Array | import("..").BinaryReader, length?: number): _85.PartSetHeader;
            fromPartial(object: Partial<_85.PartSetHeader>): _85.PartSetHeader;
            fromProtoMsg(message: _85.PartSetHeaderProtoMsg): _85.PartSetHeader;
            toProto(message: _85.PartSetHeader): Uint8Array;
            toProtoMsg(message: _85.PartSetHeader): _85.PartSetHeaderProtoMsg;
        };
        Part: {
            typeUrl: string;
            is(o: any): o is _85.Part;
            isSDK(o: any): o is _85.PartSDKType;
            encode(message: _85.Part, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
            decode(input: Uint8Array | import("..").BinaryReader, length?: number): _85.Part;
            fromPartial(object: Partial<_85.Part>): _85.Part;
            fromProtoMsg(message: _85.PartProtoMsg): _85.Part;
            toProto(message: _85.Part): Uint8Array;
            toProtoMsg(message: _85.Part): _85.PartProtoMsg;
        };
        BlockID: {
            typeUrl: string;
            is(o: any): o is _85.BlockID;
            isSDK(o: any): o is _85.BlockIDSDKType;
            encode(message: _85.BlockID, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
            decode(input: Uint8Array | import("..").BinaryReader, length?: number): _85.BlockID;
            fromPartial(object: Partial<_85.BlockID>): _85.BlockID;
            fromProtoMsg(message: _85.BlockIDProtoMsg): _85.BlockID;
            toProto(message: _85.BlockID): Uint8Array;
            toProtoMsg(message: _85.BlockID): _85.BlockIDProtoMsg;
        };
        Header: {
            typeUrl: string;
            is(o: any): o is _85.Header;
            isSDK(o: any): o is _85.HeaderSDKType;
            encode(message: _85.Header, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
            decode(input: Uint8Array | import("..").BinaryReader, length?: number): _85.Header;
            fromPartial(object: Partial<_85.Header>): _85.Header;
            fromProtoMsg(message: _85.HeaderProtoMsg): _85.Header;
            toProto(message: _85.Header): Uint8Array;
            toProtoMsg(message: _85.Header): _85.HeaderProtoMsg;
        };
        Data: {
            typeUrl: string;
            is(o: any): o is _85.Data;
            isSDK(o: any): o is _85.DataSDKType;
            encode(message: _85.Data, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
            decode(input: Uint8Array | import("..").BinaryReader, length?: number): _85.Data;
            fromPartial(object: Partial<_85.Data>): _85.Data;
            fromProtoMsg(message: _85.DataProtoMsg): _85.Data;
            toProto(message: _85.Data): Uint8Array;
            toProtoMsg(message: _85.Data): _85.DataProtoMsg;
        };
        Vote: {
            typeUrl: string;
            is(o: any): o is _85.Vote;
            isSDK(o: any): o is _85.VoteSDKType;
            encode(message: _85.Vote, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
            decode(input: Uint8Array | import("..").BinaryReader, length?: number): _85.Vote;
            fromPartial(object: Partial<_85.Vote>): _85.Vote;
            fromProtoMsg(message: _85.VoteProtoMsg): _85.Vote;
            toProto(message: _85.Vote): Uint8Array;
            toProtoMsg(message: _85.Vote): _85.VoteProtoMsg;
        };
        Commit: {
            typeUrl: string;
            is(o: any): o is _85.Commit;
            isSDK(o: any): o is _85.CommitSDKType;
            encode(message: _85.Commit, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
            decode(input: Uint8Array | import("..").BinaryReader, length?: number): _85.Commit;
            fromPartial(object: Partial<_85.Commit>): _85.Commit;
            fromProtoMsg(message: _85.CommitProtoMsg): _85.Commit;
            toProto(message: _85.Commit): Uint8Array;
            toProtoMsg(message: _85.Commit): _85.CommitProtoMsg;
        };
        CommitSig: {
            typeUrl: string;
            is(o: any): o is _85.CommitSig;
            isSDK(o: any): o is _85.CommitSigSDKType;
            encode(message: _85.CommitSig, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
            decode(input: Uint8Array | import("..").BinaryReader, length?: number): _85.CommitSig;
            fromPartial(object: Partial<_85.CommitSig>): _85.CommitSig;
            fromProtoMsg(message: _85.CommitSigProtoMsg): _85.CommitSig;
            toProto(message: _85.CommitSig): Uint8Array;
            toProtoMsg(message: _85.CommitSig): _85.CommitSigProtoMsg;
        };
        Proposal: {
            typeUrl: string;
            is(o: any): o is _85.Proposal;
            isSDK(o: any): o is _85.ProposalSDKType;
            encode(message: _85.Proposal, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
            decode(input: Uint8Array | import("..").BinaryReader, length?: number): _85.Proposal;
            fromPartial(object: Partial<_85.Proposal>): _85.Proposal;
            fromProtoMsg(message: _85.ProposalProtoMsg): _85.Proposal;
            toProto(message: _85.Proposal): Uint8Array;
            toProtoMsg(message: _85.Proposal): _85.ProposalProtoMsg;
        };
        SignedHeader: {
            typeUrl: string;
            is(o: any): o is _85.SignedHeader;
            isSDK(o: any): o is _85.SignedHeaderSDKType;
            encode(message: _85.SignedHeader, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
            decode(input: Uint8Array | import("..").BinaryReader, length?: number): _85.SignedHeader;
            fromPartial(object: Partial<_85.SignedHeader>): _85.SignedHeader;
            fromProtoMsg(message: _85.SignedHeaderProtoMsg): _85.SignedHeader;
            toProto(message: _85.SignedHeader): Uint8Array;
            toProtoMsg(message: _85.SignedHeader): _85.SignedHeaderProtoMsg;
        };
        LightBlock: {
            typeUrl: string;
            is(o: any): o is _85.LightBlock;
            isSDK(o: any): o is _85.LightBlockSDKType;
            encode(message: _85.LightBlock, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
            decode(input: Uint8Array | import("..").BinaryReader, length?: number): _85.LightBlock;
            fromPartial(object: Partial<_85.LightBlock>): _85.LightBlock;
            fromProtoMsg(message: _85.LightBlockProtoMsg): _85.LightBlock;
            toProto(message: _85.LightBlock): Uint8Array;
            toProtoMsg(message: _85.LightBlock): _85.LightBlockProtoMsg;
        };
        BlockMeta: {
            typeUrl: string;
            is(o: any): o is _85.BlockMeta;
            isSDK(o: any): o is _85.BlockMetaSDKType;
            encode(message: _85.BlockMeta, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
            decode(input: Uint8Array | import("..").BinaryReader, length?: number): _85.BlockMeta;
            fromPartial(object: Partial<_85.BlockMeta>): _85.BlockMeta;
            fromProtoMsg(message: _85.BlockMetaProtoMsg): _85.BlockMeta;
            toProto(message: _85.BlockMeta): Uint8Array;
            toProtoMsg(message: _85.BlockMeta): _85.BlockMetaProtoMsg;
        };
        TxProof: {
            typeUrl: string;
            is(o: any): o is _85.TxProof;
            isSDK(o: any): o is _85.TxProofSDKType;
            encode(message: _85.TxProof, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
            decode(input: Uint8Array | import("..").BinaryReader, length?: number): _85.TxProof;
            fromPartial(object: Partial<_85.TxProof>): _85.TxProof;
            fromProtoMsg(message: _85.TxProofProtoMsg): _85.TxProof;
            toProto(message: _85.TxProof): Uint8Array;
            toProtoMsg(message: _85.TxProof): _85.TxProofProtoMsg;
        };
        ConsensusParams: {
            typeUrl: string;
            is(o: any): o is _84.ConsensusParams;
            isSDK(o: any): o is _84.ConsensusParamsSDKType;
            encode(message: _84.ConsensusParams, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
            decode(input: Uint8Array | import("..").BinaryReader, length?: number): _84.ConsensusParams;
            fromPartial(object: Partial<_84.ConsensusParams>): _84.ConsensusParams;
            fromProtoMsg(message: _84.ConsensusParamsProtoMsg): _84.ConsensusParams;
            toProto(message: _84.ConsensusParams): Uint8Array;
            toProtoMsg(message: _84.ConsensusParams): _84.ConsensusParamsProtoMsg;
        };
        BlockParams: {
            typeUrl: string;
            is(o: any): o is _84.BlockParams;
            isSDK(o: any): o is _84.BlockParamsSDKType;
            encode(message: _84.BlockParams, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
            decode(input: Uint8Array | import("..").BinaryReader, length?: number): _84.BlockParams;
            fromPartial(object: Partial<_84.BlockParams>): _84.BlockParams;
            fromProtoMsg(message: _84.BlockParamsProtoMsg): _84.BlockParams;
            toProto(message: _84.BlockParams): Uint8Array;
            toProtoMsg(message: _84.BlockParams): _84.BlockParamsProtoMsg;
        };
        EvidenceParams: {
            typeUrl: string;
            is(o: any): o is _84.EvidenceParams;
            isSDK(o: any): o is _84.EvidenceParamsSDKType;
            encode(message: _84.EvidenceParams, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
            decode(input: Uint8Array | import("..").BinaryReader, length?: number): _84.EvidenceParams;
            fromPartial(object: Partial<_84.EvidenceParams>): _84.EvidenceParams;
            fromProtoMsg(message: _84.EvidenceParamsProtoMsg): _84.EvidenceParams;
            toProto(message: _84.EvidenceParams): Uint8Array;
            toProtoMsg(message: _84.EvidenceParams): _84.EvidenceParamsProtoMsg;
        };
        ValidatorParams: {
            typeUrl: string;
            is(o: any): o is _84.ValidatorParams;
            isSDK(o: any): o is _84.ValidatorParamsSDKType;
            encode(message: _84.ValidatorParams, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
            decode(input: Uint8Array | import("..").BinaryReader, length?: number): _84.ValidatorParams;
            fromPartial(object: Partial<_84.ValidatorParams>): _84.ValidatorParams;
            fromProtoMsg(message: _84.ValidatorParamsProtoMsg): _84.ValidatorParams;
            toProto(message: _84.ValidatorParams): Uint8Array;
            toProtoMsg(message: _84.ValidatorParams): _84.ValidatorParamsProtoMsg;
        };
        VersionParams: {
            typeUrl: string;
            is(o: any): o is _84.VersionParams;
            isSDK(o: any): o is _84.VersionParamsSDKType;
            encode(message: _84.VersionParams, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
            decode(input: Uint8Array | import("..").BinaryReader, length?: number): _84.VersionParams;
            fromPartial(object: Partial<_84.VersionParams>): _84.VersionParams;
            fromProtoMsg(message: _84.VersionParamsProtoMsg): _84.VersionParams;
            toProto(message: _84.VersionParams): Uint8Array;
            toProtoMsg(message: _84.VersionParams): _84.VersionParamsProtoMsg;
        };
        HashedParams: {
            typeUrl: string;
            is(o: any): o is _84.HashedParams;
            isSDK(o: any): o is _84.HashedParamsSDKType;
            encode(message: _84.HashedParams, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
            decode(input: Uint8Array | import("..").BinaryReader, length?: number): _84.HashedParams;
            fromPartial(object: Partial<_84.HashedParams>): _84.HashedParams;
            fromProtoMsg(message: _84.HashedParamsProtoMsg): _84.HashedParams;
            toProto(message: _84.HashedParams): Uint8Array;
            toProtoMsg(message: _84.HashedParams): _84.HashedParamsProtoMsg;
        };
        Evidence: {
            typeUrl: string;
            is(o: any): o is _83.Evidence;
            isSDK(o: any): o is _83.EvidenceSDKType;
            encode(message: _83.Evidence, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
            decode(input: Uint8Array | import("..").BinaryReader, length?: number): _83.Evidence;
            fromPartial(object: Partial<_83.Evidence>): _83.Evidence;
            fromProtoMsg(message: _83.EvidenceProtoMsg): _83.Evidence;
            toProto(message: _83.Evidence): Uint8Array;
            toProtoMsg(message: _83.Evidence): _83.EvidenceProtoMsg;
        };
        DuplicateVoteEvidence: {
            typeUrl: string;
            is(o: any): o is _83.DuplicateVoteEvidence;
            isSDK(o: any): o is _83.DuplicateVoteEvidenceSDKType;
            encode(message: _83.DuplicateVoteEvidence, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
            decode(input: Uint8Array | import("..").BinaryReader, length?: number): _83.DuplicateVoteEvidence;
            fromPartial(object: Partial<_83.DuplicateVoteEvidence>): _83.DuplicateVoteEvidence;
            fromProtoMsg(message: _83.DuplicateVoteEvidenceProtoMsg): _83.DuplicateVoteEvidence;
            toProto(message: _83.DuplicateVoteEvidence): Uint8Array;
            toProtoMsg(message: _83.DuplicateVoteEvidence): _83.DuplicateVoteEvidenceProtoMsg;
        };
        LightClientAttackEvidence: {
            typeUrl: string;
            is(o: any): o is _83.LightClientAttackEvidence;
            isSDK(o: any): o is _83.LightClientAttackEvidenceSDKType;
            encode(message: _83.LightClientAttackEvidence, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
            decode(input: Uint8Array | import("..").BinaryReader, length?: number): _83.LightClientAttackEvidence;
            fromPartial(object: Partial<_83.LightClientAttackEvidence>): _83.LightClientAttackEvidence;
            fromProtoMsg(message: _83.LightClientAttackEvidenceProtoMsg): _83.LightClientAttackEvidence;
            toProto(message: _83.LightClientAttackEvidence): Uint8Array;
            toProtoMsg(message: _83.LightClientAttackEvidence): _83.LightClientAttackEvidenceProtoMsg;
        };
        EvidenceList: {
            typeUrl: string;
            is(o: any): o is _83.EvidenceList;
            isSDK(o: any): o is _83.EvidenceListSDKType;
            encode(message: _83.EvidenceList, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
            decode(input: Uint8Array | import("..").BinaryReader, length?: number): _83.EvidenceList;
            fromPartial(object: Partial<_83.EvidenceList>): _83.EvidenceList;
            fromProtoMsg(message: _83.EvidenceListProtoMsg): _83.EvidenceList;
            toProto(message: _83.EvidenceList): Uint8Array;
            toProtoMsg(message: _83.EvidenceList): _83.EvidenceListProtoMsg;
        };
        Block: {
            typeUrl: string;
            is(o: any): o is _82.Block;
            isSDK(o: any): o is _82.BlockSDKType;
            encode(message: _82.Block, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
            decode(input: Uint8Array | import("..").BinaryReader, length?: number): _82.Block;
            fromPartial(object: Partial<_82.Block>): _82.Block;
            fromProtoMsg(message: _82.BlockProtoMsg): _82.Block;
            toProto(message: _82.Block): Uint8Array;
            toProtoMsg(message: _82.Block): _82.BlockProtoMsg;
        };
    };
    const version: {
        App: {
            typeUrl: string;
            is(o: any): o is _87.App;
            isSDK(o: any): o is _87.AppSDKType;
            encode(message: _87.App, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
            decode(input: Uint8Array | import("..").BinaryReader, length?: number): _87.App;
            fromPartial(object: Partial<_87.App>): _87.App;
            fromProtoMsg(message: _87.AppProtoMsg): _87.App;
            toProto(message: _87.App): Uint8Array;
            toProtoMsg(message: _87.App): _87.AppProtoMsg;
        };
        Consensus: {
            typeUrl: string;
            is(o: any): o is _87.Consensus;
            isSDK(o: any): o is _87.ConsensusSDKType;
            encode(message: _87.Consensus, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
            decode(input: Uint8Array | import("..").BinaryReader, length?: number): _87.Consensus;
            fromPartial(object: Partial<_87.Consensus>): _87.Consensus;
            fromProtoMsg(message: _87.ConsensusProtoMsg): _87.Consensus;
            toProto(message: _87.Consensus): Uint8Array;
            toProtoMsg(message: _87.Consensus): _87.ConsensusProtoMsg;
        };
    };
}
